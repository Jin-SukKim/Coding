/*
Stack :
    - The Stack is the temporary memory where variables are stored while a function is executing. 
    When the function finishes, the memory is cleared automatically.

Stack Data Structure :

    - A linear data sturcture which follows a paricular order in which the operations are performed
    - LIFO (Last In, First Out)
    - Top of the stack is the first one to be removed.
    - Bottommost oone remains in the stack for the longest period of time because it is last one to be removed.
    
    functions :
        1) empty()  - Returns whether the stack is empty
        2) size()   - Returns the size of the stack
        3) top()    - Returns a reference to the top most
        4) push(x)  - Adds the element 'x' at the top of the stack
        5) pop()    - Deletes the top most element of the stack

    - all function : O(1)
*/

ex)
//c
// From Lucas Magnum
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>


struct Stack {
    int size;
    int top;
    int *items;
};


struct Stack* newStack(int size) {
    struct Stack *stack = (struct Stack*)malloc(sizeof(struct Stack));

    stack->size = size;
    stack->top = -1;
    stack->items = (int *)malloc(size * sizeof(int));

    return stack;

}

void push(struct Stack *stack, int value) {
    stack->items[++stack->top] = value;
}

bool isEmpty(struct Stack *stack) {
    if (stack->top >= 0) {
        return false;
    }
    return true;
}

int pop(struct Stack *stack) {
    return stack->items[stack->top--];;
}

int peek(struct Stack *stack) {
    return stack->items[stack->top];
}

int main() {
    struct Stack *stack = newStack(5);

    push(stack, 1);
    pop(stack);

    push(stack, 2);
    push(stack, 3);
    push(stack, 4);
    push(stack, 5);

    while (!isEmpty(stack)) {
        printf("Value: %d\n", pop(stack));
    }

    exit(EXIT_SUCCESS);
}

ex1)
/* C++ program to implement basic stack 
operations */
#include <bits/stdc++.h> 

using namespace std; 

#define MAX 1000 

class Stack { 
	int top; 

public: 
	int a[MAX]; // Maximum size of Stack 

	Stack() { top = -1; } 
	bool push(int x); 
	int pop(); 
	int peek(); 
	bool isEmpty(); 
}; 

bool Stack::push(int x) 
{ 
	if (top >= (MAX - 1)) { 
		cout << "Stack Overflow"; 
		return false; 
	} 
	else { 
		a[++top] = x; 
		cout << x << " pushed into stack\n"; 
		return true; 
	} 
} 

int Stack::pop() 
{ 
	if (top < 0) { 
		cout << "Stack Underflow"; 
		return 0; 
	} 
	else { 
		int x = a[top--]; 
		return x; 
	} 
} 
int Stack::peek() 
{ 
	if (top < 0) { 
		cout << "Stack is Empty"; 
		return 0; 
	} 
	else { 
		int x = a[top]; 
		return x; 
	} 
} 

bool Stack::isEmpty() 
{ 
	return (top < 0); 
} 

// Driver program to test above functions 
int main() 
{ 
	class Stack s; 
	s.push(10); 
	s.push(20); 
	s.push(30); 
	cout << s.pop() << " Popped from stack\n"; 

	return 0; 
} 

ex2)
/* Java program to implement basic stack 
operations */
class Stack { 
	static final int MAX = 1000; 
	int top; 
	int a[] = new int[MAX]; // Maximum size of Stack 

	boolean isEmpty() 
	{ 
		return (top < 0); 
	} 
	Stack() 
	{ 
		top = -1; 
	} 

	boolean push(int x) 
	{ 
		if (top >= (MAX - 1)) { 
			System.out.println("Stack Overflow"); 
			return false; 
		} 
		else { 
			a[++top] = x; 
			System.out.println(x + " pushed into stack"); 
			return true; 
		} 
	} 

	int pop() 
	{ 
		if (top < 0) { 
			System.out.println("Stack Underflow"); 
			return 0; 
		} 
		else { 
			int x = a[top--]; 
			return x; 
		} 
	} 

	int peek() 
	{ 
		if (top < 0) { 
			System.out.println("Stack Underflow"); 
			return 0; 
		} 
		else { 
			int x = a[top]; 
			return x; 
		} 
	} 
} 

// Driver code 
class Main { 
	public static void main(String args[]) 
	{ 
		Stack s = new Stack(); 
		s.push(10); 
		s.push(20); 
		s.push(30); 
		System.out.println(s.pop() + " Popped from stack"); 
	} 
} 


