/*
Pointer : 주소값을 저장하는 변수

    - "*" 참조 연산자를 이용해 포인터 선언을 한다.
    - "&" 주소 연산자를 이용해 주소값을 저장한다.
    - 배열의 이름은 극 값을 변경할 수 없는 상수라는 점을 제외하면 포인터와 같다.
C++

1. 포인터끼리의 덧셈, 곱셈, 나눗셈은 아무런 의미가 없습니다.

2. 포인터끼리의 뺄셈은 두 포인터 사이의 상대적 거리를 나타냅니다.

3. 포인터에 정수를 더하거나 뺄 수는 있지만, 실수와의 연산은 허용하지 않습니다.

4. 포인터끼리 대입하거나 비교할 수 있습니다.

ex) int형 포인터는 int 크기인 4바이트만큼 증가

Pointer Array

arr[n] == *(arr + n);

Dynamic allocation (메모리 동적 할당)
    - run time에 메모리를 할당받아 포인터에 할당
C : malloc(), calloc(), free()
C++ : new, delete
    
타입* 포인터이름 = new 타입;
    - 자유 기억 공간 (free store)이란 메모리 공간 (memory pool)에 객체를 위한 메모리를 할당 받는다.
    - 만약 메모리가 부족하여 만들지 못하면 Null pointer반환

delete 포인터이름, free()
    - 할당받은 메모리를 다시 운영체제로 반환
    - 사용하지 않는 메모리를 다시 메모리 공간에 돌려준다.

장점: 
    1)변수의 지역성: 하나의 함수 내에서 생성한 변수를 다른 함수에서 참조, "수정" 하고싶을때 사용된다.
    - 하나의 함수에서는 다른 함수 내의 변수를 보거나 수정할 수 없지만 포인터를 사용하면 가능해진다.
    
    2) 연속된 메모리의 참조
    - Array, Struct, Class등은 연속된 메모리를 할당받는다. 이 데이터 묵음에서 하나하나의 데이터에 대해 각각 변수를 할당하지 않고,
    하나의 변수만으로 미리 지정해놓은 규칙에 따라 묶음 안에 담긴 데이터를 읽기 위해서 메모리 주소를 직접 계산하는 포인터를 사용하게 된다
    ex) linkedlist

    3) Heap 영역 참조
    - Dynamic allocation을 이용해 Heap 영역에 대한 주소를 기억해 다른 함수에서도 같은 영역을 참조할 수 있게 해준다.

    4) 재귀적 자료구조의 표현

단점:
    1) 메모리를 직접 참조한다
    - 포인터를 잘못 사용해 운영체제가 사용중인 메모리를 건들면 여러가지 에러가 발생한다.
    - 위험성이 크다.

*/

ex) 

int n = 1;
int *ptr = &n;

ex2)

int *ptr1, *ptr2;

ex3)

int x = 1;
int *ptr = &x;
int **pptr = &ptr;

ex4)

int arr[3] = {1, 2, 3};
int *ptr_arr = arr;

cout << arr[0] << endl; // 1
cout << ptr_arr[0]; // 1

cout << sizeof(arr) << endl; // 12, int형 배열 요소 3개 크기 12바이트
cout << sizeof(ptr_arr); // 8, 포인터 변수 자체의 크기 = 8

ex5)

int arr[3] = {10, 20, 30}; // 배열 선언

 

cout << arr[0] << ", " << arr[1] << ", " << arr[2] << endl; //10, 20, 30

cout << *(arr+0) << ", " << *(arr+1) << ", " << *(arr+2); //10, 20, 30

ex6)

int* ptr_int = new int;

*ptr_int = 100;

 

double* ptr_double = new double;

*ptr_double = 100.123;

 

cout << "값" << *ptr_int << "입니다." << endl; // 100

cout << "메모리 주소 " << ptr_int << "입니다." << endl; // 0x1d83010

 

cout << "값 " << *ptr_double << "입니다." << endl; // 100.123

cout << "메모리 주소 " << ptr_double << "입니다." << endl; 0x1d83030

 

delete ptr_int;

delete ptr_double
