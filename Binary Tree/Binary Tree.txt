/*
Binary Tree (이진 트리) :

    - A tree whose elements have at most 2 children
    - A tree can have 2 children, they are call left and right child.

    
*/

ex1)
struct node 
{ 
	int data; 
	struct node *left; 
	struct node *right; 
}; 

/* newNode() allocates a new node with the given data and NULL left and 
right pointers. */
struct node* newNode(int data) 
{ 
// Allocate memory for new node 
struct node* node = (struct node*)malloc(sizeof(struct node)); 

// Assign data to this node 
node->data = data; 

// Initialize left and right children as NULL 
node->left = NULL; 
node->right = NULL; 
return(node); 
} 


int main() 
{ 
/*create root*/
struct node *root = newNode(1); 
/* following is the tree after above statement 

		1 
	/ \ 
	NULL NULL 
*/
	

root->left	 = newNode(2); 
root->right	 = newNode(3); 
/* 2 and 3 become left and right children of 1 
		1 
		/ \ 
		2	 3 
	/ \ / \ 
	NULL NULL NULL NULL 
*/


root->left->left = newNode(4); 
/* 4 becomes left child of 2 
		1 
	/	 \ 
	2		 3 
	/ \	 / \ 
4 NULL NULL NULL 
/ \ 
NULL NULL 
*/

getchar(); 
return 0; 
}


ex2)
/* Class containing left and right child of current 
node and key value*/
class Node 
{ 
	int key; 
	Node left, right; 

	public Node(int item) 
	{ 
		key = item; 
		left = right = null; 
	} 
} 

// A Java program to introduce Binary Tree 
class BinaryTree 
{ 
	// Root of Binary Tree 
	Node root; 

	// Constructors 
	BinaryTree(int key) 
	{ 
		root = new Node(key); 
	} 

	BinaryTree() 
	{ 
		root = null; 
	} 

	public static void main(String[] args) 
	{ 
		BinaryTree tree = new BinaryTree(); 

		/*create root*/
		tree.root = new Node(1); 

		/* following is the tree after above statement 

			1 
			/ \ 
		null null	 */

		tree.root.left = new Node(2); 
		tree.root.right = new Node(3); 

		/* 2 and 3 become left and right children of 1 
			1 
			/ \ 
			2	 3 
		/ \ / \ 
		null null null null */


		tree.root.left.left = new Node(4); 
		/* 4 becomes left child of 2 
					1 
				/	 \ 
			2		 3 
			/ \	 / \ 
			4 null null null 
		/ \ 
		null null 
		*/
	} 
} 
